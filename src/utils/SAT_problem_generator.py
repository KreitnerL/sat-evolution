import random
import os

def generateProblem(num_vars, num_clauses, k_SAT=3):
    """
    Generates a satisfiable k-SAT problem with the given amount of variables and clauses.
    """
    assignment = []
    for i in range(1,num_vars+1):
        factor = 1 if random.getrandbits(1) == 1 else -1
        assignment.append(factor*i)
    
    problem = []
    mandatory: list = random.shuffle(assignment.copy())
    while len(problem) != num_clauses:
        if mandatory:
            clause = mandatory.pop()
        else:
            clause = random.sample(assignment, 1)
        while len(clause) != k_SAT:
            new_var = random.sample(assignment, 1)[0]
            if new_var in clause or (-1*new_var) in clause:
                continue
            factor = 1 if random.getrandbits(1) == 1 else -1
            clause.append(factor*new_var)
        random.shuffle(clause)
        if not list(filter(lambda x: set(x) == set(clause), problem)):
            problem.append(clause)
    return problem, assignment

def generateProblems(num_problems, num_vars, num_clauses, k_SAT=3):
    """
    Generate the given number of problems and writes each to a .cnf file.
    """
    for i in range(num_problems):
        name = "DATA/examples-" + str(num_vars) + "/uf" + str(num_vars) + "-" + str(i) + ".cnf"
        with open(name, "w+") as f:
            problem, assignment = generateProblem(num_vars, num_clauses, k_SAT)
            problem_string = "c This Formular was generated by Linus Kreitner\n"
            problem_string += "c Possible solution: " + str(assignment) + "\n"
            problem_string += "c clause length = " + str(k_SAT) + "\nc\n"
            problem_string += "p cnf " + str(num_vars) + " " + str(num_clauses) + "\n"
            for clause in problem:
                for var in clause:
                    problem_string += str(var) + " "
                problem_string += "0\n"
            problem_string += "%\n0"
            f.write(problem_string)
            f.flush()
            f.close()
            print("generated problem", os.getcwd() + "/" + name)

if __name__ == "__main__":
    generateProblems(1000, 20, 91)